asset_index:
  infile:
# course content
    intro: |+2
      .md
      現在，讓我們來學一個在使用 git 的時候經常會使用到的小技巧  
      常常我們會需要在檔案的歷史中，找到特定檔案想要回復的版本，然後把檔案回復  
      也就是說，現在是時候把前面兩個章節學會的技巧給串聯起來  

      假設現在我們想要將「${{level-data/commit-properties/file-4-filename}}」這份檔案回溯到「辛德勒的名單」剛被加入的狀態  
      那麼我們可以按照下面的步驟進行  

    find-commit: |+2
      .md
      首先，我們需要知道想要回溯的版本是哪一個  
      因為我們明確的希望回溯到「${{level-data/commit-properties/file-4-filename}}」的內容是「辛德勒的名單剛增加的時候」  
      我們可以透過檢視這份檔案的歷史來達成  

      請按照上一個章節所教的方法，操作${{t/gui}}來檢視「${{level-data/commit-properties/file-4-filename}}」的歷史  
      開啟檔案歷史的檢視介面後，就可以逐個版本檢查改版的修改內容  
      我們的目標是找到新增「6. 辛德勒的名單」這樣字樣的版本  

      請問該版本位於從上往下數的第幾個位置上呢？  

      1. 第一版
      2. 第三版
      3. 第五版
      4. 第七版  

      請以數字(1/2/3/4)回答  

    copy-sha: |+2
      .md
      現在我們找到了預期要回溯的版本  
      尷尬的是，我們應該如何把「檔案歷史」中找到的這一版，對應回到${{t/graph}}裡面呢？  

      請回憶先前我們曾經提過每一個${{t/revision}}都有一個獨一無二的編號－－**${{t/hash}}**  
      我們如果知道了${{t/hash}}，就可以輕易地在${{t/graph}}上面找到相應的${{t/revision}}  
      也因為如此，檔案歷史提供了一個簡便的功能來讓我們獲取它  

      請按照下圖操作，來複製目標回溯版本的${{t/hash}}  

      ![illustration]({{images/instruct-copy-hash}})  
      <div class="img-title">圖(一)</div>  
      
      如上圖所示，請對準目標的回溯版本，按下滑鼠右鍵展開選單  
      然後在選單上，找到紅框圈選的「${{st/copy-commit-hash}}」這個選項  
      按下這個選項後，目標的${{t/hash}}就被複製到剪貼簿之中了  

    find-commit-by-sha: |+2
      .md
      複製到${{t/hash}}之後，我們就只差在${{t/graph}}上面透過${{t/hash}}來定位想要的版本  

      請按照下圖操作，選中擁有目標${{t/hash}}的${{t/revision}}  

      ![illustration]({{images/instruct-select-hash-with-sha}})  
      <div class="img-title">圖(二)</div>        

      如上圖所示  
      首先，請在鍵盤上按下「Ctrl」+「F」兩個按鍵的組合以展開如紅框圈選的搜尋介面  
      然後，在搜尋介面上找到裡貼入剛才複製到剪貼簿的${{t/hash}}  
      貼上之後，按下「enter」鍵，${{t/gui}}就會自動選中符合條件的${{t/revision}}  
      在上圖之中，就是橘色框線所圈選出來的${{t/revision}}
      
    checkout-file: |+2
      .md
      現在，我們已經選中了目標的${{t/revision}}  
      剩下要做的，就是按照之前所學  
      操作${{t/gui}}的${{t/diff}}顯示介面  
      將「${{level-data/commit-properties/file-4-filename}}」的版本回溯到選中的目標版本  

      完成之後，請按下「執行」來進行檢查  

    summary: |+2
      .md
      恭喜，現在我們完整的學會了如何將檔案切換到心目中的版本  
      我們的 git 技巧已經越來越純熟了  
      但是，git 更複雜也更強大的部分還等著我們發掘呢  

      在下一個章節我們將複習一下目前為止所學習的重點  
      然後是往前更進一步的探索，敬請期待  
      