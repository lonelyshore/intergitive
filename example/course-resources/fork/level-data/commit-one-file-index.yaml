asset_index:
  infile:
# course contents
    intro-goal: |+2
      .md
      在先前的章節中，我們介紹了如何瀏覽不同版本的資料夾歷史  
      或者更精確地說，是如何瀏覽${{t/file-tree}}以及切換${{t/work-tree}}到不同的版本  

      在這一章節中，我們將學習如何增加新版本的${{t/file-tree}}  

    brief-workflow: |+2
      .md
      從先前的章節所學來看，不難想像增加新版本的大致流程會是甚麼樣子  
      基本上，就是把目前${{t/work-tree}}的狀態保存成一個檔案樹，然後放進${{t/repo}}之中  

      下面的圖(一)大致說明了這個流程

      ![illustration]({{images/brief-how-to-commit}})  
      <div class="img-title">圖(一)</div>  

      讓我們依序理解上圖發生的事情：  
      1. 一開始我們資料夾的狀態。${{t/work-tree}}是紅色的資料夾，表示和${{t/repo}}最新的紅色${{t/file-tree}}一致
      2. 我們修改資料夾的內容，讓${{t/work-tree}}變成綠色的
      3. 複製一份${{t/file-tree}}到${{t/repo}}裡面
      4. 把${{t/file-tree}}包裝成圓點，跟紅色圓點串起來
      5. 完成新增版本。請注意${{t/work-tree}}是綠色的資料夾，表示和${{t/repo}}最新的綠色${{t/file-tree}}一致  

      那麼，接下來就讓我們嘗試看看新增一個新版本吧！

    add-file: |+2
      .md
      請開啟位於 `#{{basic}}` 的資料夾，並且如下圖(二)指示增加一個檔名為 `new` 的純文字檔  

      ![illustration]({{images/add-new-file}})  
      <div class="img-title">圖(二)</div>  

      首先，請在資料夾的任意空白處按下滑鼠右鍵，展開右鍵選單  
      在選單中，將滑鼠移到如上圖紅框圈選範圍所示的「新增」選項上，展開「新增」子選單  
      然後，在子選單中找到如橘框圈選範圍所示的「文字文件」選項，按下滑鼠左鍵，新增文字文件  

      新增完成後，將文件改名為 `new` 就完成了  

      請在新增成功後，按下「確認」按鈕檢查是否成功

    instruct-open-fork: |+2
      .md
      接下來，就讓我們操作${{t/gui}}來將剛才新增檔案之後的資料夾狀態保存進${{t/repo}}之中  
      請使用${{t/gui}}開啟 `#{{basic}}`  

    instruct-open-commit: |+2
      .md
      我們將使用${{t/gui}}的${{st/changes-tab}}來完成增加版本歷史的目標  
      請如下圖(三)所示，按下${{t/gui}}視窗左側紅框圈選處的「Changes」項目  
      開啟${{st/changes-tab}}  

      ![illustration]({{images/open-changes-tab}})  
      <div class="img-title">圖(三)</div>  

      開啟完成後，應該會看見如下圖(四)的畫面  
      紅框所圈選的範圍換成了之前沒有見過的介面  

      ![illustration]({{images/changes-tab}})  
      <div class="img-title">圖(四)</div>  

      成功開啟後，請按下「確認」按鈕以繼續  

    stage-new-file: |+2
      .md
      接下來，我們將專心於操作上面圖(四)紅框圈選的範圍  
      請參考下面圖(五-1)和圖(五-2)，按照接下來指示的步驟操作：  

      如上圖(五-1)紅框圈選所示，我們會看到剛才新增加的「new.txt」被列在左上方「${{st/unstaged-changes}}」的列表中  
      請使用滑鼠左鍵選取 「new.txt」 使它呈現藍底反白  
      然後按下圖(五-1)橘框所圈選的「${{st/act-stage}}」按鈕  

      按下按鈕後，我們會注意到「new.txt」被移動到左下方的「${{st/staged-changes}}」，如圖(五-2)所示  
      這個操作，表示我們想要把新增的「new.txt」紀錄到版本歷史中  

      完成操作後，請按下「確認」按鈕檢核是否操作正確並繼續

    fill-message-and-commit: |+2
      .md
      我們距離新增一個版本非常接近了  
      決定了想要紀錄的檔案是剛才新增的「new.txt」之後  
      我們只需要再留下一些關於這次版本紀錄的訊息，就可以新增一個版本紀錄了  

      請參考下面圖(六)，按照接下來的指示操作  

      ![illustration]({{images/fill-commit-message}})  
      <div class="img-title">圖(六)</div>  

      請使用滑鼠左鍵點擊上圖紅框圈選的文字輸入欄  
      然後輸入以下的訊息：  

      ```
      ${{level-data/commit-one-file/commit-message}}
      ```
      
      輸入完成後，請按下上圖橘框圈選的「Commit 1 File」按鈕  
      請注意不要按到旁邊的顯示「v」小按鈕  

      完成後，請按下「確認」按鈕檢核是否操作正確  

    view-graph: |+2
      .md
      恭喜！我們成功完成新增一份版本到${{t/repo}}的任務  
      為了檢視我們的成果，請如下圖(七)所示  
      按下紅框圈選的${{st/all-commits-tab}}，切換到檢視${{t/graph}}的介面  

      ![illustration]({{images/all-commits-tab}})  
      <div class="img-title">圖(七)</div>  
      
      切換完成後，如下圖(八)所示  
      我們會看見${{t/graph}}上從六個圓點變成七個，最上面的一個就是剛才新增加的${{level-data/commit-one-file/commit-message}}  

      ![illustration]({{images/all-commits-tab}})  
      <div class="img-title">圖(八)</div>  

    checkout-previous-revision: |+2
      .md
      為了驗證新增加的版本歷史確實有記錄下我們新增加的檔案  
      讓我們切換到不同的版本歷史看看  

      請操作${{t/gui}}的${{t/graph}}介面，切換到「第 6 號提交」  

    confirm-sixth-commit: |+2
      .md
      ${{t/checkout-rev}}到「第 6 號提交」後，請使用檔案管理員開啟位於 `#{{basic}}` 的資料夾  
      我們會注意到剛才新增的「new.txt」現在不見了  

    checkout-seventh-commit: |+2
      .md
      現在，請${{t/checkout-rev}}回「${{level-data/commit-one-file/commit-message}}」  
    
    confirm-seventh-commit: |+2
      .md
      透過 git 的力量，我們又回到了「${{level-data/commit-one-file/commit-message}}」的版本  
      現在，請再次觀察位於 `#{{basic}}` 的資料夾內容，請問「new.txt」是否復活了呢？  

      1. 是
      2. 否
      請以數字(1/2)回答

    explain-staging: |+2
      .md
      在本章節中，我們學會了如何增加一個新的版本歷史到${{t/repo}}  

      現在讓我們來回想一下圖(一)所介紹的大致流程  
      當初其實刻意把某一個橋段給說得非常概略和模糊  
      那就是「3. 把${{t/work-tree}}複製一份到${{t/repo}}裡面」以及「4. 把${{t/file-tree}}包裝成圓點，跟紅色圓點串起來」  

      實際上我們到底是如何作到的呢？  
      其實是拆分成了三步來完成的，請參考以下圖(九-1)與圖(九-2)所築格顯示的步驟  


      上面圖(九-1)顯示的是概念上發生的事情，圖(九-2)是我們實際作的操作  
      發生的事情依序介紹如下  

      0. 我們增加了「new.txt」，準備要把${{t/work-tree}}複製到${{t/repo}}的狀態。對應到圖(一)的第 2. 步
      1. 我們在${{st/changes-tab}}按下「${{st/act-stage}}」按鈕，把綠色的${{t/work-tree}}複製一份放到中間的暫存區
      2. 填入輔助訊息
      3. 按下「Commit 1 File」按鈕，把中間位置的綠色${{t/file-tree}}和輔助訊息包裝成圓點，放進${{t/repo}}

    conclusion: |+2
      .md
      從圖(九-1)可以注意到，我們的概念圖裡面出現了一個新的區域－－中間的暫存區  
      這個暫存區的存在，實際上是很多初來乍到的人容易感到困惑的原因之一  
      因次我們這一章剩下的小節都會繼續圍繞著它來介紹，敬請期待～

# course materials
    empty: ""
    commit-message: "第 7 號提交"