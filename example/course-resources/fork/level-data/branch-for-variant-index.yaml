asset_index:
  infile:
# course content
    intro: |+2
      .md
      在前面的章節中  
      我們簡單介紹了幾個${{t/branch}}的基礎操作  
      包含了如何建立以及切換它們  
      但是，我們究竟為何需要使用${{t/branch}}呢？  

      在這個章節中  
      我們將介紹${{t/branch}}最常見的用途  
      也是通常我們會想要使用它們的方式  
      那就是用來創造並且管理「**分裂的檔案歷史**」  

    elaborate-what-is-variant: |+2
      .md
      「**分裂的歷史**」聽起來很玄幻  
      但其實非常常見，而且非常好用  

      例如，我們的資料夾中存在一個文件  
      有一天我們對它的內容不太滿意，想要修改  
      
      在沒有 git 的時候
      我們只能硬著頭皮直接修改  
      如果改完覺得很滿意，那當然很好  
      但如果改完存檔過了幾天之後，卻又突然後悔覺得原本的版本比較好  
      那就欲哭無淚了  

      當然大家都不會輕言放棄  
      在以前，為了避免欲哭無淚，我們會怎麼作呢？  
      我們會在改之前先複製一份當下的版本，另外保存起來  
      如果改完之後不滿意，我們還可以拿之前保存的版本來用  

      而有了 git 之後，我們就不需要自己把檔案特別保存起來了  
      從這個教學開頭，我們就說明了 git 的功用是把檔案的各個版本給保存起來  
      所以我們要作的，就是大膽的修改檔案  
      並且讓 git 幫我們同時保留住各種各樣修改後的版本  
      賦予我們從中挑選、隨時反悔的權利  
      
      聽起來是不是非常方便呢？  
      那麼事不宜遲  
      讓我們透過實際操作來學習看看吧  

    open-repo-and-checkout: |+2
      .md
      請使用${{t/gui}}開啟位於「`#{{checkout-branches}}`」的資料夾  
      並且切換到名為「`${{level-data/create-and-checkout-branch/branch-name-hamburger}}`」的${{t/branch}}上  

      完成之後，請按下「執行」按鈕確認  

    confirm-file-content: |+2
      .md
      我們現在切換到的${{t/branch}}上  
      有一個名為「`${{level-data/create-and-checkout-branch/file-2-name}}`」的檔案  
      在接下來的步驟中，我們將會專注於修改這個檔案 

      這個檔案顧名思義，描述了一個漢堡的構成  
      請問下列哪一個食材並「**沒有**」出現在這個檔案的描述中？  

      1. 酸黃瓜  
      2. 漢堡皮  
      3. 鳳梨  
      4. 漢堡肉

      請以數字選項(1/2/3/4)作答

    create-and-checkout-branch-1: |+2
      .md
      恩，這個漢堡目前看起來有點單調  
      不如我們為它加一點料，順便(?)學習如何使用${{t/branch}}來創造分裂的檔案歷史  

      請操作${{t/gui}}  
      在「`${{level-data/create-and-checkout-branch/branch-name-hamburger}}`」這個${{t/branch}}的位置上  
      建立名為「`${{level-data/create-and-checkout-branch/branch-name-hamburger-alt-1}}`」的${{t/branch}}，並且切換過去  

      完成之後，請按下「執行」按鈕確認結果  

    modify-alt-1: |+2
      .md
      哼哼，從${{t/branch}}的命名  
      或許你已經猜到我們我們想要加入甚麼食材了  

      沒錯！就是更多的肉，讓我們把培根給加進去吧！  
      請開啟「`${{level-data/create-and-checkout-branch/file-2-name}}`」  
      然後在「`######## 漢堡肉`」和「`\------/ 漢堡皮`」兩層之間  
      一字不差的加入「`^^^^^^^^ 培根`」(建議直接複製貼上到檔案中)  

      存檔之後  
      請使用「`${{level-data/create-and-checkout-branch/file-2-commit-alt-1}}`」作為${{t/commit-msg}}，建立${{t/revision}}  

      完成之後，請按下「執行」按鈕確認結果  

    elaborate-alt-1: |+2
      .md
      恭喜，我們在「`${{level-data/create-and-checkout-branch/file-2-name}}`」中加入培根了  
      如果回去觀察${{t/graph}}  
      我們會發現現在這個檔案的歷史裡面存有兩版  
      第一版是原來的漢堡  
      第二版則是被我們新建立的${{t/branch}}所指向的培根漢堡  

      因此，我們可以把我們新建立的${{t/branch}}看作是**改良版本**  
      「針對欲修改的檔案，從想要做為改良基礎的版本建立${{t/branch}}，並且加以修改」  
      這是${{t/branch}}的一個基本用法  

    prompt-for-alt-2: |+2
      .md
      但是，人的慾望無窮  
      除了培根漢堡以外，我們又有其它想吃的口味  
      沒有關係，這個慾望就要透過${{t/branch}}來解決  
      接下來就讓我們來創造另一個漢堡的改良口味  

    create-and-checkout-branch-2: |+2
      .md
      我們想要基於原味漢堡進行改良  
      請在「`${{level-data/create-and-checkout-branch/branch-name-hamburger}}`」這個${{t/branch}}的位置上  
      建立名為「`${{level-data/create-and-checkout-branch/branch-name-hamburger-alt-2}}`」的${{t/branch}}，並且切換過去  

      完成之後，請按下「執行」按鈕確認結果  

    modify-alt-2: |+2
      .md
      恩...從${{t/branch}}的命名  
      或許你又再一次猜到我們我們想要加入甚麼食材了  

      沒錯！肉吃太多了，不如來點青菜吧！  
      請在「`/------\ 漢堡皮`」和「`++ ++ ++ 酸黃瓜`」兩層之間  
      一字不差的加入「`~~~~~~~~ 生菜`」(建議直接複製貼上到檔案中)  

      存檔之後  
      請使用「`${{level-data/create-and-checkout-branch/file-2-commit-alt-2:v1}}`」作為${{t/commit-msg}}，建立${{t/revision}}  

      完成之後，請按下「執行」按鈕確認結果  

    elaborate-alt-2: |+2
      .md
      恭喜，我們成功作出了生菜漢堡  
      這時候，如果回去觀察${{t/graph}}  
      就會得到如下圖(一)的結果  

      ![illustration]({{images/intro-history-has-two-variant-branches}})  
      <div class="img-title">圖(一)</div>  

      從上圖中不難發現，${{t/graph}}裡同時存在我們建立的兩種漢堡${{t/branch}}
      也就是「培根漢堡」還有「生菜漢堡」  

      如果我們繼續在上面摸索，就會注意到  
      因為生菜漢堡是基於原味漢堡的改良，所以它裡面不會有培根  
      相反的，培根漢堡裡面也不會有生菜  
      也就是說，我們同時擁有兩種互不影響的改良漢堡－－  
      在漢堡的發展史上，出現了平行時空  
      這就是我們所說的，「`分裂的歷史`」  

    prompt-for-alt-3: |+2
      .md
      既然我們可以有兩種不同的平行漢堡，再多加一種應該也不會有甚麼問題了  
      就讓我們再來練習一次看看吧  

    create-and-checkout-branch-3: |+2
      .md
      我們還是想要基於原味漢堡進行改良  
      請在「`${{level-data/create-and-checkout-branch/branch-name-hamburger}}`」這個${{t/branch}}的位置上  
      建立名為「`${{level-data/create-and-checkout-branch/branch-name-hamburger-alt-3}}`」的${{t/branch}}，並且切換過去  

      完成之後，請按下「執行」按鈕確認結果  

    modify-alt-3: |+2
      .md
      恩...從${{t/branch}}的命名  
      你應該毫不意外的又猜到我們我們想要加入甚麼食材了  

      沒錯！漢堡裡豈能沒有番茄呢？  
      請在「`++ ++ ++ 酸黃瓜`」和「`######## 漢堡肉`」兩層之間  
      一字不差的加入「`:==::==: 番茄`」(建議直接複製貼上到檔案中)  

      存檔之後  
      請使用「`${{level-data/create-and-checkout-branch/file-2-commit-alt-3}}`」作為${{t/commit-msg}}，建立${{t/revision}}  

      完成之後，請按下「執行」按鈕確認結果  

    elaborate-alt-3: |+2
      .md
      恭喜，我們完成了最新款式的番茄漢堡  
      現在，我們的漢堡總共有三種不同口味的改良漢堡了  

      只要我們想要，隨時可以取回喜歡的漢堡口味(${{t/checkout-branch}})  
      也可以不同開創新口味(建立新${{t/branch}})  
      這就是${{t/branch}}好用的地方  

    prompt-for-alt-2-again: |+2
      .md
      但是目前為止，每一種改良口味，都只比原味漢堡多出一項食材  
      實在是太淺薄了  
      尤其是生菜漢堡，突然覺得它的味道太淡了，應該要加一些調味料才對...  

      沒關係，我們可以跳到任意的${{t/branch}}上，繼續鑽研一度中斷的開發  
      接下來就讓我們接續生菜漢堡的研發吧  
    
    checkout-branch-2: |+2
      .md
      為了要繼續鑽研生菜漢堡  
      我們需要先${{t/checkout-branch}}到「`${{level-data/create-and-checkout-branch/branch-name-hamburger-alt-2}}`」才可以  
      請操作${{t/gui}}${{t/checkout-branch}}  

      完成之後，請按下「執行」按鈕確認結果  

    modify-alt-2-again: |+2
      .md
      剛剛說到我們想要加上調味料  
      說到漢堡的醬料，果然還是少不了芥末醬吧  
      請在「`/------\ 漢堡皮`」和「`~~~~~~~~ 生菜`」兩層之間  
      一字不差的加入「`******** 黃芥末醬`」(建議直接複製貼上到檔案中)  

      存檔之後  
      請使用「`${{level-data/create-and-checkout-branch/file-2-commit-alt-2:v2}}`」作為${{t/commit-msg}}，建立${{t/revision}}  

      完成之後，請按下「執行」按鈕確認結果  

    elaborate-alt-2-again: |+2
      .md
      恭喜，現在我們的生菜漢堡應該足夠有味道了  
      同時，我們也了解了${{t/branch}}的開發是隨時可以接續進行的  
      例如我們現在想要在培根漢堡加上花生醬，只要切到「`${{level-data/create-and-checkout-branch/branch-name-hamburger-alt-1}}`」然後繼續修改培根漢堡就可以了  

    summary: |+2
      .md
      在這個章節中  
      我們學習到了${{t/branch}}主要的用途  
      是用來維護多種不同修改方向的檔案同時存在  
      以及方便我們在不同的版本切換，接續先前的修改  
      因此我們可以放心大膽的隨時去修改檔案，專心在我們想要完成的內容產出  
      
      在接下來的章節中  
      我們將繼續介紹${{t/branch}}的一些特性  
      讓我們使用上可以更加上手  
      
