!level
  repoVcsSetups:
    merge-branches:
      workingPath: merge-branches
      referenceStoreName: merge-branches
      checkpointStoreName: merge-branches
  steps:
  # renew repo
    - !dev.devAction 
      actions:
      # init git
        - !dev.act.git
          repoSetupName: merge-branches
          arguments:
            - init
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ config, "--local", user.name, someone]
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ config, "--local", user.email, someone@some.mail]
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ config, "--local", core.autocrlf, input]
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ config, "--local", gc.auto, "0" ]
      
      # commit #1
        - !act.writeFile &write1
          sourceAssetIds:
            - "$level-data/merge-branch/file-1:v1"
          destinationPaths:
            - "merge-branches/file.txt"
        - !dev.act.git &stageAll
          repoSetupName: merge-branches
          arguments: [ "add", "-A" ]
        - !dev.act.git &commitDummy
          repoSetupName: merge-branches
          arguments: [ "commit", "-m", "dummy commit" ]

      # commit #2
        - !act.writeFile &write2
          sourceAssetIds:
            - "$level-data/merge-branch/file-1:v2"
          destinationPaths:
            - "merge-branches/file.txt"
        - *stageAll
        - *commitDummy
      
      # add dummy commits up to six
        #3
        - *write1
        - *stageAll
        - *commitDummy
        - *write2
        - *stageAll
        - *commitDummy

        #5
        - *write1
        - *stageAll
        - *commitDummy
        - *write2
        - *stageAll
        - *commitDummy

      # branch for checking is ancestor
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "checkout", "-fB", "$level-data/merge-branch/branch-name-ancestor", "master~2" ]

        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "checkout", "-fB", "$level-data/merge-branch/branch-name-not-ancestor", "master~2" ]
        - !act.writeFile 
          sourceAssetIds: [ "$level-data/merge-branch/file-1:v3" ]
          destinationPaths: [ "merge-branches/file.txt" ]
        - *stageAll
        - *commitDummy

        - !dev.act.idle &idle
          seconds: 1

      # develop various versions of hamburger
        # no-burger
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "checkout", "-fB", "$level-data/merge-branch/branch-name-no-hamburger", "master" ]

        # original
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "checkout", "-fB", "$level-data/merge-branch/branch-name-hamburger", "master" ]
        - !act.writeFile 
          sourceAssetIds:
              - "$level-data/merge-branch/file-2:v1"
          destinationPaths:
              - "$level-data/merge-branch/file-2-path"
        - *stageAll 
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "commit", "-m", "$level-data/merge-branch/file-2-commit-hamburger" ]
        - *idle

        # add frech fries as side dish
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "checkout", "-fB", "$level-data/merge-branch/branch-name-sidedish-alt-1", "$level-data/merge-branch/branch-name-hamburger"]
        - !act.writeFile 
          sourceAssetIds:
              - "$level-data/merge-branch/file-3:alt-1"
          destinationPaths:
              - "$level-data/merge-branch/file-3-path"
        - *stageAll
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "commit", "-m", "$level-data/merge-branch/file-3-commit" ]
        - *idle

        # pineapple
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "checkout", "-fB", "$level-data/merge-branch/branch-name-hamburger-del-1", "$level-data/merge-branch/branch-name-hamburger" ]
        - !act.writeFile 
          sourceAssetIds: [ "$level-data/merge-branch/file-2:del-1" ]
          destinationPaths: [ "$level-data/merge-branch/file-2-path" ]
        - *stageAll
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "commit", "-m", "$level-data/merge-branch/file-2-commit-del-1" ]
        - *idle

        # giant
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "checkout", "-fB", "$level-data/merge-branch/branch-name-hamburger-del-2", "$level-data/merge-branch/branch-name-hamburger" ]
        - !act.writeFile 
          sourceAssetIds: [ "$level-data/merge-branch/file-2:del-2:v1" ]
          destinationPaths: [ "$level-data/merge-branch/file-2-path" ]
        - *stageAll
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "commit", "-m", "$level-data/merge-branch/file-2-commit-del-2:v1" ]

        - !act.writeFile 
          sourceAssetIds: [ "$level-data/merge-branch/file-2:del-2:v2" ]
          destinationPaths: [ "$level-data/merge-branch/file-2-path" ]
        - *stageAll
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "commit", "-m", "$level-data/merge-branch/file-2-commit-del-2:v2" ]

        - !act.writeFile 
          sourceAssetIds: [ "$level-data/merge-branch/file-2:del-2:v3" ]
          destinationPaths: [ "$level-data/merge-branch/file-2-path" ]
        - *stageAll
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "commit", "-m", "$level-data/merge-branch/file-2-commit-del-2:v3" ]
        - *idle

        # double definition
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "checkout", "-fB", "$level-data/merge-branch/branch-name-hamburger-del-3:v1", "$level-data/merge-branch/branch-name-hamburger" ]
        - !act.writeFile 
          sourceAssetIds: [ "$level-data/merge-branch/file-2:del-3" ]
          destinationPaths: [ "$level-data/merge-branch/file-2-path" ]
        - *stageAll
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "commit", "-m", "$level-data/merge-branch/file-2-commit-del-3" ]

        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "branch", "$level-data/merge-branch/branch-name-hamburger-del-3:v2"]

        # tomato
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "checkout", "-fB", "$level-data/merge-branch/branch-name-hamburger-alt-3", "$level-data/merge-branch/branch-name-hamburger" ]
        - !act.writeFile 
          sourceAssetIds: [ "$level-data/merge-branch/file-2:alt-3" ]
          destinationPaths: [ "$level-data/merge-branch/file-2-path" ]
        - *stageAll
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "commit", "-m", "$level-data/merge-branch/file-2-commit-alt-3" ]
        - *idle

        # letuce
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "checkout", "-fB", "$level-data/merge-branch/branch-name-hamburger-alt-2", "$level-data/merge-branch/branch-name-hamburger" ]
        - !act.writeFile 
          sourceAssetIds: [ "$level-data/merge-branch/file-2:alt-2:v1" ]
          destinationPaths: [ "$level-data/merge-branch/file-2-path" ]
        - *stageAll
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "commit", "-m", "$level-data/merge-branch/file-2-commit-alt-2:v1" ]

        - !act.writeFile 
          sourceAssetIds: [ "$level-data/merge-branch/file-2:alt-2:v2" ]
          destinationPaths: [ "$level-data/merge-branch/file-2-path" ]
        - *stageAll
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "commit", "-m", "$level-data/merge-branch/file-2-commit-alt-2:v2" ]
        - *idle

        # becon
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "checkout", "-fB", "$level-data/merge-branch/branch-name-hamburger-alt-1", "$level-data/merge-branch/branch-name-hamburger" ]
        - !act.writeFile 
          sourceAssetIds: [ "$level-data/merge-branch/file-2:alt-1" ]
          destinationPaths: [ "$level-data/merge-branch/file-2-path" ]
        - *stageAll
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "commit", "-m", "$level-data/merge-branch/file-2-commit-alt-1" ]
        - *idle

      # final touches and save reference to init
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "checkout", "-f", "hamburger" ]
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "branch", "-D", "master" ]
        - !dev.act.saveReference 
          repoSetupName: merge-branches
          referenceName: init
        
    - !loadOneReference
      repoSetupName: merge-branches
      referenceName: init

    - !elaborate 
      descriptionId: "level-data/merge-branch/intro"
    - !instruct  
      descriptionId: "level-data/merge-branch/open-repo"

  # instruct to merge a branch
    - !elaborate 
      descriptionId: "level-data/merge-branch/recall-various-branches"
    - !instruct 
      descriptionId: "level-data/merge-branch/create-merging-branch"
      needConfirm: false
    - !dev.needAction 
      actions:
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "checkout", "-fB", "$level-data/merge-branch/branch-name-merging", "$level-data/merge-branch/branch-name-hamburger-alt-1"]
    - !verifyRepo 
      referenceName: merge-branch-create-merging-branch

    - !instruct 
      descriptionId: "level-data/merge-branch/confirm-current-content"
      needConfirm: false
    - !verifyInput 
      answer: "2"

    - !instruct 
      descriptionId: "level-data/merge-branch/confirm-another-content"
      needConfirm: false
    - !verifyInput 
      answer: "1"


    - !instruct 
      descriptionId: "level-data/merge-branch/instruct-merge-branch-1"
      needConfirm: false
    - !dev.needAction 
      actions:
        - !dev.act.git 
          repoSetupName: merge-branches
          arguments: [ "merge", "$level-data/merge-branch/branch-name-hamburger-alt-2" ]
    - !verifyRepo 
      referenceName: merge-branch-merge-with-alt-2

  # explain effect of merge
    - !instruct 
      descriptionId: "level-data/merge-branch/confirm-merged-content-1"
      needConfirm: false
    - !verifyInput 
      answer: "3"

    - !elaborate 
      descriptionId: "level-data/merge-branch/demonstrate-content-merged"
    - !elaborate 
      descriptionId: "level-data/merge-branch/introduce-merge"
    - !illustrate  
      descriptionId: "level-data/merge-branch/illustrate-merge"

    - !instruct 
      descriptionId: "level-data/merge-branch/where-is-head"
      needConfirm: false
    - !verifyInput 
      answer: "1"
    - !elaborate 
      descriptionId: "level-data/merge-branch/explain-head-unchanged"
  
  # merge again and observe location of merged branch
    - !instruct 
      descriptionId: "level-data/merge-branch/observe-merged-branch-location"
      needConfirm: false
    - !verifyInput 
      answer: "3"
    - !instruct 
      descriptionId: "level-data/merge-branch/instruct-merge-again"
      needConfirm: false
    - !dev.needAction 
      actions:
          - !dev.act.git 
            repoSetupName: merge-branches
            arguments: [ "merge", "$level-data/merge-branch/branch-name-hamburger-alt-3"]
    - !verifyRepo 
      referenceName: merge-branch-merge-with-alt-3

    - !instruct 
      descriptionId: "level-data/merge-branch/observe-merged-branch-location-again"
      needConfirm: false
    - !verifyInput 
      answer: "3"
    - !elaborate 
      descriptionId: "level-data/merge-branch/reassure-merged-branch-unmoved"

    - !illustrate 
      descriptionId: "level-data/merge-branch/merge-process"

    - !elaborate 
      descriptionId: "level-data/merge-branch/summary"