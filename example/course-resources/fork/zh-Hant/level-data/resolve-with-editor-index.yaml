asset_index:
  infile:
    intro: |+2
      .md
      現在，我們已經掌握如何使用合併工具來解決${{t/conflict}}的方法  
      但是，其實我們不一定要使用合併工具才可以解決${{t/conflict}}  
      不用依靠他，我們自己也是可以解決的  
      有些時候，不要使用合併工具反而比較方便  

      接下來就讓我們學習要如何不用透過合併工具就可以解決${{t/merge}}${{t/conflict}}  
      以及這麼做有甚麼好處吧  

    generate-conflicts: |+2
      .md
      一如既往，我們將繼續承接前一個章節所使用的練習用${{t/repo}}  
      因此，請使用${{t/gui}}開啟位在「`#{{resolve-conflict}}`」的${{t/repo}}  

      緊接著，我們需要製造一些練習用的${{t/conflict}}  
      請在下一個步驟中按下「執行」按鈕，自動製造本地和遠端的${{t/conflict}}  

    confirm-conflicted-file: |+2
      .md
      現在，我們的${{t/repo}}裡面已經產生衝突了  
      但是請克制住想要開啟合併工具的衝動！  

      在這個章節中我們要自力更生  
      靠著「直接修改」發生衝突的檔案來${{t/resolve}}  

      請從檔案瀏覽器中開啟位於「`#{{resolve-conflict}}`」的「${{level-data/resolve-with-editor/file-name}}」  
      開啟之後，應該會看到檔案中有一些類似「`<<<<<<<`」、「`=======`」還有「`>>>>>>>`」的符號  
      請問被夾在這些符號之間的，是甚麼樣的內容呢：  
      1. 開頭為「10樓：」的一些文字
      2. 結尾為「：樓10」的一些文字  
      3. 幾張插圖

      請以數字選項(1/2/3)作答  

    conflict-markers: |+2
      .md
      從上個步驟的問答中  
      我們發現到我們的檔案裡面出現一些類似「`<<<<<<<`」、「`=======`」還有「`>>>>>>>`」的奇怪符號  
      如果我們回去看檔案的修改歷史，會發現這些符號從來沒有存在於修改歷史中  
      這些符號，是 git 用來**標記${{t/conflict}}發生的位置**的  

      簡單地來說，被 `<<<<<<<` 還有 `=======` 夾起來的區塊  
      是來自於**主動${{t/merge}}的${{t/branch}}**的修改(通常是我們的)  
      相反地，被 `=======` 還有 `>>>>>>>` 夾起來的區塊  
      則是來自於**被${{t/merge}}的${{t/branch}}**的修改(通常是別人的)  

      那麼，為什麼之前我們從來都沒有見到過這誰符號呢？  
      非常簡單，因為這些符號被合併工具用來辨認衝突發生的地方之後，就被忽略不顯示了  
      而合併完成之後，這些符號就被一併刪除了  

    benefit-of-direct-edit: |+2
      .md
      現在我們了解到了：
      1. git 使用特殊符號來標記發生衝突的位置  
      2. 合併工具會省略這些符號，直接開啟檔案可以看見這些符號  

      但是，直接開啟檔案編輯有甚麼好處呢？  
      有的，就是我們可以直接決定衝突排除後的檔案內容  

      在繼續進行之前，先讓我們看清楚手頭上發生衝突的雙方，他們的修改內容分別為何吧  

    confirm-conflicted-content: |+2
      .md
      請問被 `<<<<<<<` 和 `=======` 夾起來的內容，還有 `=======` 和 `>>>>>>>` 夾起來的內容  
      分別是下列何者呢？  
      1. 「10樓：十全十美」和「10樓：衣食無缺」  
      2. 「10樓：巧克力工廠」和「10樓：冰糖葫蘆」  
      3. 「10樓：麻辣大王」和「極辣地獄」  

      請以數字選項(1/2/3)作答  

    resolve-by-editting: |+2
      .md
      從上面的問答可以發現，衝突的兩邊，分別是「巧克力工廠」以及「冰糖葫蘆」  
      以百貨公司來說，兩種甜食當然都是非常歡迎的  
      如果我們使用合併工具的話，就只能選擇其中一邊了  
      但我們全部都想要的話，又該怎麼辦呢？  

      沒有問題！  
      只要直接修改「${{level-data/resolve-with-editor/file-name}}」這個檔案的內容就可以了  

      請將 `<<<<<<<` 、 `=======` 以及 `>>>>>>>` 等符號所在的行直接刪除  
      還有將被他們夾住的文字也都刪除  
      刪完之後，在原本的位置上替換成一行「10樓：甜點王國」  
      修改完畢，請儲存檔案  

      完成之後，請按下這個步驟中的「執行」按鈕，確認修改正確  

    need-for-staging: |+2
      .md
      恭喜！  
      我們透過手工直接修改檔案本身，把檔案改良成為我們真正想要的最後形式  
      而剛才的過程，在實際協作的情境中有時候也會發生：  
      綜合考量了兩個分支的修改成果之後  
      我們可能在${{t/merge}}的時候才會發現有些地方應該改成第三種樣貌才會是最完整的選擇  

      但是請千萬記得  
      修改完檔案之後，這個修改的紀錄還沒有真正成為修改歷史的一部分  
      請記得要將修改完成的檔案${{t/stage}}  
      ${{t/stage}}之後 git 才會認為這個檔案的衝突已經獲得解決  
      然後，我們才可以建立${{t/revision}}，完成${{t/merge}}  

    stage-and-commit: |+2
      .md
      請按照先前所學  
      將「${{level-data/resolve-with-editor/file-name}}」${{t/stage}}之後  
      建立${{t/revision}}  
      ${{t/commit-msg}}請直接沿用自動填入的內容就可以了  

      完成之後，請按下這個步驟中的「執行」按鈕，確認操作成功  

    push: |+2
      .md
      恭喜，我們已經成功${{t/resolve}}${{t/conflict}}並且完成${{t/merge}}  
      就讓我們把剛才${{t/merge}}的成果${{t/push}}到${{t/remote-repo}}吧！  

      完成之後，請按下這個步驟中的「執行」按鈕，確認操作成功  

    summary: |+2
      .md
      在這個章節中  
      我們學習了 git 是如何巧妙地利用特殊符號來標示出檔案中發生衝突的位置  
      除此之外，我們也學習了可以透過直接修改檔案內容，來消除衝突  
      這樣做的好處是我們可以根據實際需求，自由地編寫合併完成後的檔案內容  

# repo assets
    file-name: 百貨公司
    full-file-name: 百貨公司.txt
    file-path-another: resolve-conflict-another/百貨公司.txt
    file-path-this: resolve-conflict/百貨公司.txt
    file-another: |+2
      20樓：景觀餐廳
      19樓：休閒服飾
      18樓：
      17樓：視聽劇場
      16樓：
      15樓：寢俱傢飾
      14樓：
      13樓：品味生活
      12樓：
      11樓：少淑女裝
      10樓：冰糖葫蘆
      09樓：
      08樓：運動服飾
      07樓：
      06樓：貴婦精品
      05樓：
      04樓：包包飾品
      03樓：少女潮牌
      02樓：婦幼童裝
      01樓：化妝品、精品
    file-this: |+2
      20樓：景觀餐廳
      19樓：休閒服飾
      18樓：
      17樓：視聽劇場
      16樓：
      15樓：寢俱傢飾
      14樓：
      13樓：品味生活
      12樓：
      11樓：少淑女裝
      10樓：巧克力工廠
      09樓：
      08樓：運動服飾
      07樓：
      06樓：貴婦精品
      05樓：
      04樓：包包飾品
      03樓：少女潮牌
      02樓：婦幼童裝
      01樓：化妝品、精品
    file-resolved: |+2
      20樓：景觀餐廳
      19樓：休閒服飾
      18樓：
      17樓：視聽劇場
      16樓：
      15樓：寢俱傢飾
      14樓：
      13樓：品味生活
      12樓：
      11樓：少淑女裝
      10樓：甜點王國
      09樓：
      08樓：運動服飾
      07樓：
      06樓：貴婦精品
      05樓：
      04樓：包包飾品
      03樓：少女潮牌
      02樓：婦幼童裝
      01樓：化妝品、精品
    commit-message: "設置 10"