asset_index:
  infile:
    intro: |+2
      .md
      ### <u>歡迎來到 `intergitive` ！</u>  
      
      如您所知(也如 intergitive 這個名字所暗示的)，這是一個專注於「互動式地」教導如何「使用 git」的程式  
      我們的目標不只是學會如何操作 git，更將學習為何要這樣做，以期靈活自如地使用這個工具  
      
      但是，我們真的應該花時間來學好 git 嗎？這真是一個令人猶豫的問題  
      就讓我們在把頭洗下去之前，先來解答一些常有的疑惑，來幫助自己下定決心吧！  

    why-git: |+2
      .md
      ### <u>甚麼是 git ？</u>  

      一種常見的比喻是 git 就好像是電腦上的時光機(例：[[1]](https://medium.com/@entzuliu/%E6%9C%89git%E5%B0%B1%E5%83%8F%E6%93%81%E6%9C%89%E6%99%82%E5%85%89%E6%A9%9F-a07eed0d9c55)、[[2]](https://gitbook.tw/chapters/introduction/about-this-book.html)`)  
      當有需要的時候，我們可以藉由它返回到過去的時間點把東西找回來  

      另一種觀點(我的觀點XD)則是， git 很像是遊戲裡面的存檔系統  
      我們可以隨時隨地保留一份存檔，當出大事的時候就趕快倒回到之前比較滿意的存檔再接再厲  
      
      但是這兩種譬喻都只呈現了 git 的其中一種面向－－回溯檔案版本的面向  
      這個面向確實是最具戲劇張力(?)的一個面向，不過實際上 git 還可以做得更多  

      ### <u>git 還有甚麼能力呢？</u>  

      除了最為人津津樂道的回溯檔案的能力， git 還經常被用在兩個地方  

      第一個是它可以整理出檔案版本變化的歷史  
      就好像考古學家或歷史學家一樣，我們可以藉此瞭解到過去甚麼時間點發生了甚麼事情  

      為什麼需要考古？  
      因為人的記憶力有限，常常過一陣子就忘記自己以前做了甚麼事情了  
      另外，如果是團隊合作的情況，這是~~抓戰犯~~了解別人做過甚麼事情的好工具  

      恩...？團隊合作是啥？  
      這就說到 git 的另一個常用的功能  
      它可以整合來自多個電腦的檔案變化史，將多個人各自修改或編寫的檔案，融合在一起  

      如果你~~很幸運地~~從來沒有過團隊合作的經驗  
      可以試圖想像一下一台汽車會是如何製造的：  
      我們都知道一台汽車是由多個零件組裝起來的，每個零件都是由不同的工廠生產  
      最後這些零件會被送到組裝廠中組合起來  

      這裡的零件工廠就是團隊的各個成員，大家都各自製作自己的部件  
      而 git 就像是自動化的組裝工廠，在*大多數*的情況下可以自動把所有人的工作結晶拼接起來  

      說到這裡，是否已經迫不及待地想要使用 git 的種種能力了呢？  
      但是，俗話說「[能力越大，責任越大](https://en.wikipedia.org/wiki/With_great_power_comes_great_responsibility)」<br>
      這麼強大的能力我真的駕馭得了嗎...？

    who-is-target: |+2
      .md
      ### <u>誰適合學習 git ？</u>  

      不用擔心！  
      這份教學的設計初衷是讓任何的電腦使用者都能夠學會使用 git  
      雖然 git 最開始是[設計給程式設計師/軟體工程師使用的](https://zh.wikipedia.org/wiki/Git)  
      前面所提到的各種 git 超能力絕對是任何使用電腦的人都可以妥善利用的！  
      當然，如果是程式設計師，更是一定要徹底把握這項技能  

      然而，很不幸的事情是， git 本身並不友善，非常不容易學習  
      一不小心還有可能把自己的電腦檔案給弄壞掉  
      甚至有網站以[角色扮演](https://zh.wikipedia.org/wiki/%E6%B8%B8%E6%88%8F%E4%B9%A6)的方式來引導[如何修復不小心被 git 弄壞掉的檔案](https://sethrobertson.github.io/GitFixUm/fixup.html)...  
      (其實蠻有趣的也蠻實用的，不過我衷心祈禱沒有人會需要用到它)  

      這...聽起來好像有點可怕！？  
      沒有問題！這個程式正是作者總結了學習 git 的過程中親身經歷各種辛酸血淚後累積而成的結果  
      它將幫助任何有心想要學習 git 的人避開常見的雷區，有效率地掌握如何使用 git  

    what-content: |+2
      .md
      ### <u>我應該如何使用這份教材？</u>  
      正如前面所述，這個程式旨在協助「任何人」避開雷區而且有效率地學習  
      更確切地說，希望不同知識背景的人都能夠找到這份教材有用之處  

      👉如果您是普通的電腦使用者，沒有程式設計相關背景，最近才剛聽說 git 這個名詞  
      
      這份教材設計的時候就是為了世界上占了大多數非程式背景的人來設計的！  
      它避免使用令人望之卻步的文字指令介面，選擇以簡單易用的圖形化介面來進行說明  
      令生硬的 git 瞬間就友善了不少  

      另一方面，我們將以實際生活中常用的 git 使用情境出發  
      搭配明確的步驟指引還有圖片解說逐步引導「想要做到這件事情時，可以這樣操作」  
      學習的內容跟實際使用的需求有很強的關聯，增加學習的動機  

      最後，在操作完成後及時確認是否有操作成功，不用擔心因為不熟悉而不小心操作失敗  
      完成這個教學之後，您就可以熟稔的使用 git 前述的各種能力  
      ---  

      👉如果您具有程式設計相關背景，但是沒怎麼學習過 git  

      這正是筆者當初的學習軌跡！  
      為了能夠輕鬆地學習 git，這份教學的教學路線經過特別的設計  
      從最基礎的原點出發，盡可能在解釋清楚每一個概念之後才引入新概念  
      讓使用者可以和緩地、循序漸進地學習如何使用 git  
      除此之外，這份教學也揉合了不少「要是當初有人跟我說過這個的話該有多好」的小知識在其中  
      以期能夠避免一些奇怪的誤解或是犯下可怕的錯誤  

      順帶一提，當初筆者大概經過一個月的痛苦掙扎才真的覺得自己好像有一點點了解 git 在做甚麼了  
      完成這個教學後，您將可以輕鬆超越筆者痛苦掙扎一個月的程度  
      ---  

      👉如果您已經有在使用 git，想要進一步了解背後發生了甚麼事情  

      精益求精是進步的原動力！  
      除了學習如何操作 git 之外，這份教材也盡可能地用淺顯易懂的方式說明 git 的運作原理  
      了解了運作原理之後，就可以舉一反三  
      在遇到這份教學沒有提及過的問題發生的時候，有能力可以自力排除  
      更有甚者，對於有程式設計相關背景的人來說，學習 git 設計上的巧思也是一種有趣的體驗  
      完成這個教學後，您可能會對版本控制背後所要解決的問題有了進一步的了解  
      ---  

      👉如果您已經對 git 有通透的了解  
      
      恭喜您已經參透了 git 的來龍去脈前世今生！  
      這份教學很可能無法帶給您更多的東西  
      如果可以，或許可以考慮幫忙[讓這個專案變得更好](https://github.com/lonelyshore/intergitive/blob/master/contribution-guides/zh-TW.md)，造福更多的人，感激不盡！  

    summary: |+2
      .md
      在這個序章中，我們大致分析了
      - 我為什麼需要 git ？
      - 我適合用 git 嗎？
      - 我可以預期從這份教材學到甚麼？  

      相信經過一輪分析後，大家已經摩拳擦掌躍躍欲試了  
      接下來就請進入第一章，開始我們的旅程吧！  



